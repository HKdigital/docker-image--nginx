
#
# The internal location `/.prerender_proxy` proxies the requests to a
# prerender service.
#
# @note make sure the prerender host has been set
#

# ............................................................. Prerender source

include /@config/prerender_source.conf;

# ..................................................... Prerender proxy location

location /.prerender_proxy {
  internal;  # not accessible from the outside

  if ($prerender = 0) {
    return 404;
  }

  proxy_hide_header Cache-Control;
  add_header Cache-Control "private,max-age=600,must-revalidate";

  # ---------------------------------------------------------------- Rewrite url

  #
  # Default:
  #
  # Resolve using DNS server to force DNS resolution and prevent caching of IPs
  # (only needed for external prerender services)
  # resolver 8.8.8.8 8.8.4.4;
  #
  rewrite .* /render/$prerender_source/index.html? break;

  #
  # Alternative:
  #
  # Rendering using host `webserver` (internal)
  #
  # @warning might not work if not all resources come from the same
  #          server or CORS is needed!!!
  #
  # rewrite .* /render/http://webserver$request_uri? break;

  # ----------------------------------------------------------------- Proxy pass

  #
  # Default: (internal prerender server)
  #
  proxy_pass http://prerender:3000;

  #
  # Alternative: (variable hostname)
  #
  # NGINX needs a resolver for docker container names when used as variable:
  # resolver 127.0.0.11;
  #
  # set $prerender_host "prerender";
  #
  # (note the protocol and port)
  # proxy_pass http://$prerender_host:3000;
}
